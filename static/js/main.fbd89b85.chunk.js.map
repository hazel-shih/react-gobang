{"version":3,"sources":["index.js"],"names":["BoardContext","createContext","Square","x","y","children","useContext","handleClick","winner","onClick","className","Board","board","map","row","rowIndex","square","squareIndex","Title","thisTurnIsBlack","fixed","add","back","checkBound","move","max","min","check","currentX","currentY","currentColor","directionX","directionY","count","i","moveX","moveY","Game","useState","Array","fill","setBoard","setThisTurnIsBlack","records","setRecords","setWinner","judgeWinLose","useCallback","length","color","whoIsWinner","find","result","initialize","Provider","value","col","newRecord","record","index","style","fontWeight","display","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbd89b85.chunk.js","sourcesContent":["import React, { useState, useContext, createContext, useCallback } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nconst BoardContext = createContext();\n\nfunction Square({ x, y, children }) {\n  const { handleClick, winner } = useContext(BoardContext);\n  return (\n    <button\n      x={x}\n      y={y}\n      onClick={() => {\n        if (winner) return;\n        handleClick(x, y);\n      }}\n      className=\"square\"\n    >\n      {children ? (children === \"Èªë\" ? \"üåö\" : \"üåù\") : null}\n    </button>\n  );\n}\n\nfunction Board({ board }) {\n  return (\n    <>\n      {board.map((row, rowIndex) => {\n        return (\n          <div key={rowIndex}>\n            {row.map((square, squareIndex) => (\n              <Square x={squareIndex} y={rowIndex} key={squareIndex}>\n                {square}\n              </Square>\n            ))}\n            <br />\n          </div>\n        );\n      })}\n    </>\n  );\n}\n\nfunction Title({ thisTurnIsBlack, winner }) {\n  return (\n    <div className=\"status\">\n      {winner\n        ? \"ÈÅäÊà≤ÁµêÊùüÂöï üèÅ\"\n        : thisTurnIsBlack\n        ? \"ÊèõÈªëÊ£ã‰∏ã üè¥Ô∏è\"\n        : \"ÊèõÁôΩÊ£ã‰∏ã üè≥Ô∏è\"}\n    </div>\n  );\n}\n\nconst fixed = [0, 0, 0, 0];\nconst add = [1, 2, 3, 4];\nconst back = [-1, -2, -3, -4];\n\nfunction checkBound(move, max, min) {\n  return move <= max && move >= min;\n}\n\nfunction check(\n  board,\n  currentX,\n  currentY,\n  currentColor,\n  directionX,\n  directionY\n) {\n  let count = 0;\n  for (let i = 0; i < 4; i++) {\n    let moveX = currentX + directionX[i];\n    let moveY = currentY + directionY[i];\n    if (!checkBound(moveX, 18, 0) || !checkBound(moveY, 18, 0)) continue;\n    if (board[moveY][moveX] === currentColor) {\n      count++;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\n\nfunction Game() {\n  const [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)));\n  const [thisTurnIsBlack, setThisTurnIsBlack] = useState(true);\n  const [records, setRecords] = useState([]);\n  const [winner, setWinner] = useState(null);\n\n  const judgeWinLose = useCallback((records, board) => {\n    if (records.length === 0) return;\n    let currentColor = records[records.length - 1].color;\n    let currentX = records[records.length - 1].x;\n    let currentY = records[records.length - 1].y;\n    let whoIsWinner = null;\n    let results = [\n      check(board, currentX, currentY, currentColor, add, add),\n      check(board, currentX, currentY, currentColor, add, fixed),\n      check(board, currentX, currentY, currentColor, add, back),\n      check(board, currentX, currentY, currentColor, fixed, add),\n      check(board, currentX, currentY, currentColor, fixed, back),\n      check(board, currentX, currentY, currentColor, back, add),\n      check(board, currentX, currentY, currentColor, back, fixed),\n      check(board, currentX, currentY, currentColor, back, back),\n    ];\n    results.find((result) => result === 4) && (whoIsWinner = currentColor);\n    whoIsWinner && setWinner(whoIsWinner);\n  }, []);\n\n  function handleClick(x, y) {\n    setBoard(\n      board.map((row, currentY) => {\n        if (currentY !== y) return row;\n        return row.map((col, currentX) => {\n          if (currentX !== x) return col;\n          return thisTurnIsBlack ? \"Èªë\" : \"ÁôΩ\";\n        });\n      })\n    );\n    const newRecord = [\n      ...records,\n      { color: thisTurnIsBlack ? \"Èªë\" : \"ÁôΩ\", x: x, y: y },\n    ];\n    setRecords(newRecord);\n    judgeWinLose(newRecord, board);\n    !winner && setThisTurnIsBlack((thisTurnIsBlack) => !thisTurnIsBlack);\n  }\n\n  const initialize = useCallback(() => {\n    setBoard(Array(19).fill(Array(19).fill(null)));\n    setThisTurnIsBlack(true);\n    setRecords([]);\n    setWinner(null);\n  }, []);\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Title thisTurnIsBlack={thisTurnIsBlack} winner={winner} />\n        <BoardContext.Provider value={{ handleClick, thisTurnIsBlack, winner }}>\n          <Board board={board} />\n        </BoardContext.Provider>\n      </div>\n      <div className=\"game-info\">\n        <ol>\n          {records.map((record, index) => (\n            <li key={index}>{`${record.color}(${record.x}, ${record.y})`}</li>\n          ))}\n        </ol>\n        <div style={{ color: \"red\", fontWeight: \"bold\" }}>\n          {winner && `ÊÅ≠Âñú ${winner} Áç≤Âãù üéâüéâüéâ`}\n        </div>\n        <button onClick={initialize} style={winner ? {} : { display: \"none\" }}>\n          ÂÜçÁé©‰∏ÄÊ¨°\n        </button>\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}